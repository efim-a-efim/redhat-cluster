diff --git a/lib/ClusterConf/Postgres.py b/lib/ClusterConf/Postgres.py
new file mode 100644
index 0000000..9390d1d
--- /dev/null
+++ b/lib/ClusterConf/Postgres.py
@@ -0,0 +1,18 @@
+# Copyright (C) 2006-2009 Red Hat, Inc.
+#
+# This program is free software; you can redistribute
+# it and/or modify it under the terms of version 2 of the
+# GNU General Public License as published by the
+# Free Software Foundation.
+
+from BaseResource import BaseResource
+from gettext import gettext as _
+
+TAG_NAME = 'postgres'
+RESOURCE_TYPE = _('PostgreSQL Instance')
+
+class Postgres(BaseResource):
+  def __init__(self):
+    BaseResource.__init__(self)
+    self.TAG_NAME = TAG_NAME
+    self.resource_type = RESOURCE_TYPE
diff --git a/lib/ClusterConf/PostgresMasterSlave.py b/lib/ClusterConf/PostgresMasterSlave.py
new file mode 100644
index 0000000..26141ed
--- /dev/null
+++ b/lib/ClusterConf/PostgresMasterSlave.py
@@ -0,0 +1,18 @@
+# Copyright (C) 2006-2009 Red Hat, Inc.
+#
+# This program is free software; you can redistribute
+# it and/or modify it under the terms of version 2 of the
+# GNU General Public License as published by the
+# Free Software Foundation.
+
+from BaseResource import BaseResource
+from gettext import gettext as _
+
+TAG_NAME = 'postgres_masterslave'
+RESOURCE_TYPE = _('PostgreSQL Master/Slave')
+
+class PostgresMasterSlave(BaseResource):
+  def __init__(self):
+    BaseResource.__init__(self)
+    self.TAG_NAME = TAG_NAME
+    self.resource_type = RESOURCE_TYPE
diff --git a/templates/fence_devices.html b/templates/fence_devices.html
index 99c3bf1..6bde2ae 100644
--- a/templates/fence_devices.html
+++ b/templates/fence_devices.html
@@ -1452,6 +1452,207 @@
   <input type="hidden" name="fence_type" value="fence_virsh" />
 </div>
 
+<div py:def="fence_pvevm(cur_fencedev, ni)" id="fence_pvevm" class="fencedevform row"
+   py:attrs="cur_fencedev and {'id': 'fd_%s' % cur_fencedev.getName()}">
+  <table class="formtable">
+    <tr>
+      <td>Fence Type</td>
+      <td>Proxmox VE VM Fence Agent</td>
+    </tr>
+    <tr>
+      <td>Name</td>
+      <td>
+        <input name="name" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getName()} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>IP Address or Hostname</td>
+      <td>
+        <input name="ipaddr" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('ipaddr')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>IP Port (optional)</td>
+      <td>
+        <input name="ipport" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('ipport')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Login</td>
+      <td>
+        <input name="login" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('login')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Password</td>
+      <td>
+        <input name="passwd" type="password" class="text" autocomplete="off"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('passwd')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>
+        <span title="Full path to a script to generate fence password">Password Script (optional)</span>
+      </td>
+      <td>
+        <input type="text" class="text" name="passwd_script"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('passwd_script')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Power Wait (seconds)</td>
+      <td>
+        <input type="text" class="text" name="power_wait"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('power_wait')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Power Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="power_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('power_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Shell Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="shell_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('shell_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Login Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="login_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('login_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Times to Retry Power On Operation</td>
+      <td>
+        <input type="text" class="text" name="retry_on"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('retry_on')} or {}"/>
+      </td>
+    </tr>
+  </table>
+
+  <py:if test="cur_fencedev">
+    <input type="hidden"
+      name="orig_name" value="${cur_fencedev.getName()}"/>
+    <input type="hidden"
+      name="existing_device" value="1" />
+  </py:if>
+
+  <input type="hidden" name="sharable" value="1" />
+  <input type="hidden" name="num_instances" value="${ni}"/>
+  <input type="hidden" name="fence_type" value="fence_pvevm" />
+</div>
+
+<div py:def="fence_pvect(cur_fencedev, ni)" id="fence_pvect" class="fencedevform row"
+   py:attrs="cur_fencedev and {'id': 'fd_%s' % cur_fencedev.getName()}">
+  <table class="formtable">
+    <tr>
+      <td>Fence Type</td>
+      <td>Proxmox VE Container Fence Agent</td>
+    </tr>
+    <tr>
+      <td>Name</td>
+      <td>
+        <input name="name" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getName()} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>IP Address or Hostname</td>
+      <td>
+        <input name="ipaddr" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('ipaddr')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>IP Port (optional)</td>
+      <td>
+        <input name="ipport" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('ipport')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Login</td>
+      <td>
+        <input name="login" type="text" class="text"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('login')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Password</td>
+      <td>
+        <input name="passwd" type="password" class="text" autocomplete="off"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('passwd')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>
+        <span title="Full path to a script to generate fence password">Password Script (optional)</span>
+      </td>
+      <td>
+        <input type="text" class="text" name="passwd_script"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('passwd_script')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Power Wait (seconds)</td>
+      <td>
+        <input type="text" class="text" name="power_wait"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('power_wait')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Power Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="power_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('power_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Shell Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="shell_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('shell_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Login Timeout (seconds)</td>
+      <td>
+        <input type="text" class="text" name="login_timeout"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('login_timeout')} or {}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Times to Retry Power On Operation</td>
+      <td>
+        <input type="text" class="text" name="retry_on"
+          py:attrs="cur_fencedev and {'value': cur_fencedev.getAttribute('retry_on')} or {}"/>
+      </td>
+    </tr>
+  </table>
+
+  <py:if test="cur_fencedev">
+    <input type="hidden"
+      name="orig_name" value="${cur_fencedev.getName()}"/>
+    <input type="hidden"
+      name="existing_device" value="1" />
+  </py:if>
+
+  <input type="hidden" name="sharable" value="1" />
+  <input type="hidden" name="num_instances" value="${ni}"/>
+  <input type="hidden" name="fence_type" value="fence_pvect" />
+</div>
+
+
 <div py:def="fence_rhevm(cur_fencedev, ni)" id="fence_rhevm" class="fencedevform row"
    py:attrs="cur_fencedev and {'id': 'fd_%s' % cur_fencedev.getName()}">
   <table class="formtable">
@@ -4715,6 +4916,8 @@ ${fence_bladecenter(None,0)}
 ${fence_bullpap(None,0)}
 ${fence_virt(None,0)}
 ${fence_virsh(None,0)}
+${fence_pvevm(None,0)}
+${fence_pvect(None,0)}
 ${fence_rhevm(None,0)}
 ${fence_xvm(None,0)}
 ${fence_scsi(None,0)}
@@ -4842,6 +5045,8 @@ ${fence_unknown(None,0)}
         <option name="fence_alom" value="fence_alom">Sun ALOM</option>
         <option name="fence_ldom" value="fence_ldom">Sun LDOM</option>
         <option name="fence_virsh" value="fence_virsh">virsh fence agent</option>
+        <option name="fence_pvevm" value="fence_pvevm">Proxmox VE VM fence agent</option>
+        <option name="fence_pvect" value="fence_pvect">Proxmox VE Container fence agent</option>
       </py:if>
 
       <option py:if="cluster_version == 2" name="fence_vixel" value="fence_vixel">Vixel SAN Switch</option>
diff --git a/templates/fence_instances.html b/templates/fence_instances.html
index 3b915bc..de3d71c 100644
--- a/templates/fence_instances.html
+++ b/templates/fence_instances.html
@@ -374,6 +374,116 @@
     py:attrs="cur_fence_dev_id and {'value': cur_fence_dev_id} or {}" />
 </div>
 
+<div py:def="fence_pvevm_instance(cur_fence_inst, cur_fence_dev_id, fi_id, **kw)" id="fence_pvevm_instance"
+  py:attrs="fi_id is not None and {'id': fi_id, 'class':'fenceinst'}">
+  <table class="detailstable">
+    <tr>
+      <td>VM ID</td>
+      <td>
+        <input name="port" type="text" class="text"
+          py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('port')}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Delay (optional)</td>
+      <td>
+        <input name="delay" type="text" class="text"
+          py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('delay')}"/>
+      </td>
+    </tr>
+    <tr><td>
+      <fieldset>
+        <legend>SSH</legend>
+        <table class="detailstable">
+         <tr>
+          <td>
+            <span title="Enable SSH operation">Use SSH</span>
+          </td>
+          <td>
+            <input type="checkbox" class="checkbox" name="secure"
+              py:attrs="cur_fence_inst and cur_fence_inst.getAttribute('secure') and {'checked': 'checked'}"/>
+          </td>
+         </tr>
+         <tr>
+          <td>Path to SSH Identity File</td>
+          <td>
+            <input type="text" class="text" name="identity_file"
+              py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('identity_file')}"/>
+          </td>
+         </tr>
+        </table>
+      </fieldset>
+    </td></tr>
+    <tr><td colspan="2">
+      <div>
+        <input type="button" name="remove_fence" value="Remove this instance"
+          py:attrs="fi_id is not None and {'onclick': '$(\'#%s\').remove()' % fi_id} or {}"/>
+      </div>
+    </td></tr>
+  </table>
+
+  <input type="hidden" name="fence_type" value="fence_pvevm" />
+  <input type="hidden" name="fence_instance" value="1" />
+  <input type="hidden" name="parent_fencedev"
+    py:attrs="cur_fence_dev_id and {'value': cur_fence_dev_id} or {}" />
+</div>
+
+
+<div py:def="fence_pvect_instance(cur_fence_inst, cur_fence_dev_id, fi_id, **kw)" id="fence_pvect_instance"
+  py:attrs="fi_id is not None and {'id': fi_id, 'class':'fenceinst'}">
+  <table class="detailstable">
+    <tr>
+      <td>Container ID</td>
+      <td>
+        <input name="port" type="text" class="text"
+          py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('port')}"/>
+      </td>
+    </tr>
+    <tr>
+      <td>Delay (optional)</td>
+      <td>
+        <input name="delay" type="text" class="text"
+          py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('delay')}"/>
+      </td>
+    </tr>
+    <tr><td>
+      <fieldset>
+        <legend>SSH</legend>
+        <table class="detailstable">
+         <tr>
+          <td>
+            <span title="Enable SSH operation">Use SSH</span>
+          </td>
+          <td>
+            <input type="checkbox" class="checkbox" name="secure"
+              py:attrs="cur_fence_inst and cur_fence_inst.getAttribute('secure') and {'checked': 'checked'}"/>
+          </td>
+         </tr>
+         <tr>
+          <td>Path to SSH Identity File</td>
+          <td>
+            <input type="text" class="text" name="identity_file"
+              py:attrs="cur_fence_inst and {'value': cur_fence_inst.getAttribute('identity_file')}"/>
+          </td>
+         </tr>
+        </table>
+      </fieldset>
+    </td></tr>
+    <tr><td colspan="2">
+      <div>
+        <input type="button" name="remove_fence" value="Remove this instance"
+          py:attrs="fi_id is not None and {'onclick': '$(\'#%s\').remove()' % fi_id} or {}"/>
+      </div>
+    </td></tr>
+  </table>
+
+  <input type="hidden" name="fence_type" value="fence_pvect" />
+  <input type="hidden" name="fence_instance" value="1" />
+  <input type="hidden" name="parent_fencedev"
+    py:attrs="cur_fence_dev_id and {'value': cur_fence_dev_id} or {}" />
+</div>
+
+
 <div py:def="fence_rhevm_instance(cur_fence_inst, cur_fence_dev_id, fi_id, **kw)" id="fence_rhevm_instance"
   py:attrs="fi_id is not None and {'id': fi_id, 'class':'fenceinst'}">
   <table class="detailstable">
@@ -1386,6 +1496,8 @@ ${fence_ifmib_instance(None, None, None)}
 ${fence_intelmodular_instance(None, None, None)}
 ${fence_ipdu_instance(None, None, None)}
 ${fence_virsh_instance(None, None, None)}
+${fence_pvevm_instance(None, None, None)}
+${fence_pvect_instance(None, None, None)}
 ${fence_rhevm_instance(None, None, None)}
 ${fence_drac_instance(None, None, None)}
 ${fence_drac5_instance(None, None, None)}
diff --git a/templates/resource_list.html b/templates/resource_list.html
index e3097ae..0bf6550 100644
--- a/templates/resource_list.html
+++ b/templates/resource_list.html
@@ -1620,6 +1620,119 @@
   </table>
 </div>
 
+<div py:def="postgres_resource(res, form_id, parent_id, isref)" name="postgres" id="postgres_resource" class="row rescfg"
+  py:with="global_resource = res and isref != 0"
+  py:attrs="res and {'id': 'global_res_%s' % res.getName(), 'name': res.getName()}">
+  <input name="global" type="hidden" value="1" py:if="global_resource"/>
+  <input name="parent_id" type="hidden" value="${parent_id}"/>
+  <input name="form_id" type="hidden" value="${form_id}"/>
+  <input name="oldname" type="hidden"
+    py:attrs="res and {'value':res.getAttribute('name')} or {}" />
+  <input name="type" type="hidden" value="postgres" />
+
+  <h3>PostgreSQL Instance</h3>
+  <table class="formtable">
+    <tr>
+      <td>Name</td>
+      <td>
+        <input type="text" class="text" name="resourcename"
+          py:attrs="res and {'value':res.getAttribute('name'), 'disabled':global_resource and 'disabled' or None} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>PostgreSQL path</td>
+      <td>
+        <input type="text" class="text" name="path"
+          py:attrs="res and {'value':res.getAttribute('path')} or {}" />
+      </td>
+    </tr>
+
+    <tr>
+      <td>Data path</td>
+      <td>
+        <input type="text" class="text" name="data_directory"
+          py:attrs="res and {'value':res.getAttribute('data_directory')} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>PostgreSQL system user</td>
+      <td>
+        <input type="text" class="text" name="postmaster_user"
+          py:attrs="res and {'value':res.getAttribute('postmaster_user')} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>Postgres options</td>
+      <td>
+        <input type="text" class="text" name="postmaster_options"
+          py:attrs="res and {'value':res.getAttribute('postmaster_options')} or {}" />
+      </td>
+    </tr>
+    ${res_footer(res)}
+  </table>
+</div>
+
+
+<div py:def="postgres_masterslave_resource(res, form_id, parent_id, isref)" name="postgres_masterslave" id="postgres_masterslave_resource" class="row rescfg"
+  py:with="global_resource = res and isref != 0"
+  py:attrs="res and {'id': 'global_res_%s' % res.getName(), 'name': res.getName()}">
+  <input name="global" type="hidden" value="1" py:if="global_resource"/>
+  <input name="parent_id" type="hidden" value="${parent_id}"/>
+  <input name="form_id" type="hidden" value="${form_id}"/>
+  <input name="oldname" type="hidden"
+    py:attrs="res and {'value':res.getAttribute('name')} or {}" />
+  <input name="type" type="hidden" value="postgres_masterslave" />
+
+  <h3>PostgreSQL Master/Slave</h3>
+  <table class="formtable">
+    <tr>
+      <td>Name</td>
+      <td>
+        <input type="text" class="text" name="resourcename"
+          py:attrs="res and {'value':res.getAttribute('name'), 'disabled':global_resource and 'disabled' or None} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>PostgreSQL path</td>
+      <td>
+        <input type="text" class="text" name="path"
+          py:attrs="res and {'value':res.getAttribute('path')} or {}" />
+      </td>
+    </tr>
+
+    <tr>
+      <td>Data path</td>
+      <td>
+        <input type="text" class="text" name="data_dir"
+          py:attrs="res and {'value':res.getAttribute('data_dir')} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>DB User</td>
+      <td>
+        <input type="text" class="text" name="user"
+          py:attrs="res and {'value':res.getAttribute('user')} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>DB Password</td>
+      <td>
+        <input type="text" class="text" name="password"
+          py:attrs="res and {'value':res.getAttribute('password')} or {}" />
+      </td>
+    </tr>
+    <tr>
+      <td>DB Port</td>
+      <td>
+        <input type="text" class="text" name="port"
+          py:attrs="res and {'value':res.getAttribute('port')} or {}" />
+      </td>
+    </tr>
+    ${res_footer(res)}
+  </table>
+</div>
+
+
 <div py:def="condor_resource(res, form_id, parent_id, isref)" name="CONDOR" id="condor_resource" class="row rescfg"
   py:with="global_resource = res and isref != 0"
   py:attrs="res and {'id': 'global_res_%s' % res.getName(), 'name': res.getName()}">
@@ -1760,6 +1873,8 @@ ${mysql_resource(None,None,None,0)}
 ${lvm_resource(None,None,None,0)}
 ${openldap_resource(None,None,None,0)}
 ${postgres8_resource(None,None,None,0)}
+${postgres_resource(None,None,None,0)}
+${postgres_masterslave_resource(None,None,None,0)}
 ${tomcat5_resource(None,None,None,0)}
 ${tomcat6_resource(None,None,None,0)}
 ${SAPInstance_resource(None,None,None,0)}
@@ -1831,6 +1946,8 @@ ${condor_resource(None,None,None,0)}
     <option name="orainstance_resource" value="orainstance_resource">Oracle 10g Instance</option>
     <option name="oralistener_resource" value="oralistener_resource">Oracle 10g Listener</option>
     <option name="openldap_resource" value="openldap_resource">Open LDAP</option>
+    <option name="postgres_resource" value="postgres_resource">PostgreSQL Instance</option>
+    <option name="postgres_masterslave_resource" value="postgres_masterslave_resource">PostgreSQL Master/Slave</option>
     <option name="postgres8_resource" value="postgres8_resource">PostgreSQL 8</option>
     <option name="SAPDatabase_resource" value="SAPDatabase_resource">SAP Database</option>
     <option name="SAPInstance_resource" value="SAPInstance_resource">SAP Instance</option>
diff --git a/validation/validate_fence.py b/validation/validate_fence.py
index 4b6e968..66535da 100644
--- a/validation/validate_fence.py
+++ b/validation/validate_fence.py
@@ -191,6 +191,42 @@ def val_virsh_fd(fencedev, fence_name, **kw):
 	errors = config_fence_attr(params, fencedev, fence_name, **kw)
 	return errors
 
+def val_pvevm_fd(fencedev, fence_name, **kw):
+	params = (
+		('ipaddr', True),
+		('ipport', False),
+		('login', True),
+		('passwd', False),
+		('passwd_script', False),
+		('power_wait', False),
+		('power_timeout', False),
+		('shell_timeout', False),
+		('login_timeout', False),
+		('retry_on', False),
+	)
+
+	errors = config_fence_attr(params, fencedev, fence_name, **kw)
+	return errors
+
+
+def val_pvect_fd(fencedev, fence_name, **kw):
+	params = (
+		('ipaddr', True),
+		('ipport', False),
+		('login', True),
+		('passwd', False),
+		('passwd_script', False),
+		('power_wait', False),
+		('power_timeout', False),
+		('shell_timeout', False),
+		('login_timeout', False),
+		('retry_on', False),
+	)
+
+	errors = config_fence_attr(params, fencedev, fence_name, **kw)
+	return errors
+
+
 def val_brocade_fd(fencedev, fence_name, **kw):
 	params = (
 		('ipaddr', True),
@@ -872,6 +908,8 @@ FD_VALIDATE = {
 	'fence_sanlock':		val_sanlock_fd,
 	'fence_scsi':			val_scsi_fd,
 	'fence_virsh':			val_virsh_fd,
+	'fence_pvevm':			val_pvevm_fd,
+	'fence_pvect':			val_pvect_fd,
 	'fence_virt':			val_virt_fd,
 	'fence_vixel':			val_vixel_fd,
 	'fence_vmware':			val_vmware_fd,
@@ -971,6 +1009,30 @@ def val_virsh_fi(fenceinst, parent_name, **kw):
 	errors = config_fence_attr(params, fenceinst, parent_name, **kw)
 	return errors
 
+def val_pvevm_fi(fenceinst, parent_name, **kw):
+	params = (
+		('port', True),
+		('secure', False),
+		('identity_file', False),
+		('delay', False),
+	)
+
+	errors = config_fence_attr(params, fenceinst, parent_name, **kw)
+	return errors
+
+
+def val_pvect_fi(fenceinst, parent_name, **kw):
+	params = (
+		('port', True),
+		('secure', False),
+		('identity_file', False),
+		('delay', False),
+	)
+
+	errors = config_fence_attr(params, fenceinst, parent_name, **kw)
+	return errors
+
+
 def val_brocade_fi(fenceinst, parent_name, **kw):
 	params = (
 		('port', True),
@@ -1280,6 +1342,8 @@ FI_VALIDATE = {
 	'fence_sanlock':		val_sanlock_fi,
 	'fence_scsi':			val_scsi_fi,
 	'fence_virsh':			val_virsh_fi,
+	'fence_pvevm':			val_pvevm_fi,
+	'fence_pvect':			val_pvect_fi,
 	'fence_virt':			val_virt_fi,
 	'fence_vixel':			val_vixel_fi,
 	'fence_vmware':			val_vmware_fi,
diff --git a/validation/validate_resource.py b/validation/validate_resource.py
index 20ecdb9..92314ea 100644
--- a/validation/validate_resource.py
+++ b/validation/validate_resource.py
@@ -19,6 +19,8 @@ from luci.lib.ClusterConf.Smb import Smb
 from luci.lib.ClusterConf.Tomcat5 import Tomcat5
 from luci.lib.ClusterConf.Tomcat6 import Tomcat6
 from luci.lib.ClusterConf.Postgres8 import Postgres8
+from luci.lib.ClusterConf.Postgres import Postgres
+from luci.lib.ClusterConf.PostgresMasterSlave import PostgresMasterSlave
 from luci.lib.ClusterConf.Apache import Apache
 from luci.lib.ClusterConf.OpenLDAP import OpenLDAP
 from luci.lib.ClusterConf.LVM import LVM
@@ -342,6 +344,29 @@ def addPostgres8(res, rname, model, **kw):
 	errors = config_resource(params, res, rname, **kw)
 	return errors
 
+def addPostgres(res, rname, model, **kw):
+	params = (
+		('psql_path', _('Path to PostgreSQL binaries'), False, None),
+		('data_directory', _('Path to data directory'), False, None),
+		('postmaster_user', '', False, None),
+		('postmaster_options', '', False, None),
+		('shutdown_wait', '', False, None)
+	)
+	errors = config_resource(params, res, rname, **kw)
+	return errors
+
+def addPostgresMasterSlave(res, rname, model, **kw):
+	params = (
+		('path', _('Path to PostgreSQL binaries'), False, None),
+		('data_dir', _('Path to data directory'), False, None),
+		('user', '', False, None),
+		('password', '', False, None),
+		('port', '', False, None)
+	)
+	errors = config_resource(params, res, rname, **kw)
+	return errors
+
+
 def addTomcat5(res, rname, model, **kw):
 	params = (
 		('config_file', _('Path to configuration file'), False, None),
@@ -523,6 +548,8 @@ resource_table = {
 	'tomcat-5':			( addTomcat5,			Tomcat5			),
 	'tomcat-6':			( addTomcat6,			Tomcat6			),
 	'postgres-8':		( addPostgres8,			Postgres8		),
+	'postgres':		( addPostgres,			Postgres		),
+	'postgres_masterslave':	( addPostgresMasterSlave,	PostgresMasterSlave	),
 	'apache':			( addApache,			Apache			),
 	'openldap':			( addOpenLDAP,			OpenLDAP		),
 	'lvm':				( addLVM,				LVM				),
